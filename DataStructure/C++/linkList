#ifndef _LINK_LIST_H_
#define _LINK_LIST_H_
#include<iostream>
template<class Type>
class linkListNode {
	public:
	Type data;
	linkListNode *next;
	linkListNode(Type data=0);
};
template<class Type>
class linkList {
	linkListNode<Type> *pHead;
	linkListNode<Type> *pList;
	int length;
	public:
	linkList();
	linkList(Type *pArray,int size);
	bool isEmpty();
	void show();
	int dataSearch(Type data);
	Type indexSearch(int pos=-1);
	bool insert(Type data,int pos=-1);
	Type erase(int pos=-1);
	linkList& split(linkList &list);
};
template<class Type>
linkListNode<Type>::linkListNode(Type data){
	this->data=data;
	this->next=NULL;
}
template<class Type>
linkList<Type>::linkList(){
	pHead=new linkListNode<Type>;
	pList=pHead->next;
	length=0;
}
template<class Type>
linkList<Type>::linkList(Type *pArray,int size){
	pHead=new linkListNode<Type>;
	pList=pHead;
	for(int i=0;i<size;++i){
		pList->next=new linkListNode<Type>(pArray[i]);
		pList=pList->next;
	}
	length=size;
}
template<class Type>
bool linkList<Type>::isEmpty(){
	return pHead->next==NULL;
}
template<class Type>
void linkList<Type>::show(){
	pList=pHead->next;
	if(pList==NULL){
		std::cout<<"list is empty"<<std::endl;
		return;
	}
	while(pList){
		std::cout<<pList->data<<" ";
		pList=pList->next;
	}
	std::cout<<std::endl;
}
template<class Type>
int linkList<Type>::dataSearch(Type data){
	pList=pHead->next;
	int i=0;
	while(pList){
		if(pList->data==data){
			return i;
		}
		pList=pList->next;
		++i;
	}
	return -1;
}
template<class Type>
Type linkList<Type>::indexSearch(int pos){
	if(pos==-1){
		pos=0;
	}
	if(pos<-1||pos>=length){
		return 0;
	}
	pList=pHead->next;
	int i=0;
	while(i++<pos&&pList){
		pList=pList->next;
	}
	if(i<pos&&pList==NULL){
		return 0;
	}
	return pList->data;
}
template<class Type>
bool linkList<Type>::insert(Type data,int pos){
	if(pos==-1){
		pos=0;
	}
	if(pos<-1&&pos>length){
		return false;
	}
	pList=pHead;
	int i=0;
	while(i++<pos&&pList){
		pList=pList->next;
	}
	if(i<pos&&pList==NULL){
		return false;
	}
	linkListNode<Type> *pTemp;
	pTemp=pList->next;
	pList->next=new linkListNode(data);
	pList=pList->next;
	pList->next=pTemp;
	++length;
	return true;
}
template<class Type>
Type linkList<Type>::erase(int pos){
	if((pos<-1&&pos>=length)||isEmpty()){
		return 0;
	}
	if(pos==-1){
		pos=0;
	}
	pList=pHead;
	int i=0;
	while(i++<pos&&pList){
		pList=pList->next;
	}
	if(i<pos&&pList==NULL){
		return 0;
	}
	linkListNode<Type> *pTemp;
	Type e;
	pTemp=pList->next;
	e=pTemp->data;
	pList->next=pTemp->next;
	delete pTemp;
	--length;
	return e;
}
template<class Type>
linkList<Type>& linkList<Type>::split(linkList<Type> &list){
	length=length+list.length;
	pList=pHead;
	while(pList->next){
		pList=pList->next;
	}
	for(int i=0;i<list.length;++i){
		pList->next=new linkListNode<Type>(list.indexSearch(i));
		pList=pList->next;
	}
	return *this;
}
#endif